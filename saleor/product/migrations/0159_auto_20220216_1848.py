# Generated by Django 3.2.12 on 2022-02-16 18:48

import django.contrib.postgres.indexes
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import saleor.core.db.fields
import saleor.core.utils.editorjs
import saleor.core.utils.json_serializer
import versatileimagefield.fields


class Migration(migrations.Migration):

    dependencies = [
        ('channel', '0003_alter_channel_default_country'),
        ('product', '0158_auto_20220120_1633'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private_metadata', models.JSONField(blank=True, default=dict, encoder=saleor.core.utils.json_serializer.CustomJsonEncoder, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, encoder=saleor.core.utils.json_serializer.CustomJsonEncoder, null=True)),
                ('seo_title', models.CharField(blank=True, max_length=70, null=True, validators=[django.core.validators.MaxLengthValidator(70)])),
                ('seo_description', models.CharField(blank=True, max_length=300, null=True, validators=[django.core.validators.MaxLengthValidator(300)])),
                ('name', models.CharField(max_length=250)),
                ('slug', models.SlugField(allow_unicode=True, max_length=255, unique=True)),
                ('background_image', versatileimagefield.fields.VersatileImageField(blank=True, null=True, upload_to='collection-backgrounds')),
                ('background_image_alt', models.CharField(blank=True, max_length=128)),
                ('description', saleor.core.db.fields.SanitizedJSONField(blank=True, null=True, sanitizer=saleor.core.utils.editorjs.clean_editor_js)),
            ],
            options={
                'ordering': ('slug',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MyCollectionProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(db_index=True, editable=False, null=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mycollectionproduct', to='product.mycollection')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mycollectionproduct', to='product.product')),
            ],
            options={
                'unique_together': {('collection', 'product')},
            },
        ),
        migrations.AddField(
            model_name='mycollection',
            name='products',
            field=models.ManyToManyField(blank=True, related_name='mycollections', through='product.MyCollectionProduct', to='product.Product'),
        ),
        migrations.CreateModel(
            name='MyCollectionChannelListing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('publication_date', models.DateField(blank=True, null=True)),
                ('is_published', models.BooleanField(default=False)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_collection_listings', to='channel.channel')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channel_listings', to='product.mycollection')),
            ],
            options={
                'ordering': ('pk',),
                'unique_together': {('collection', 'channel')},
            },
        ),
        migrations.AddIndex(
            model_name='mycollection',
            index=django.contrib.postgres.indexes.GinIndex(fields=['private_metadata'], name='mycollection_p_meta_idx'),
        ),
        migrations.AddIndex(
            model_name='mycollection',
            index=django.contrib.postgres.indexes.GinIndex(fields=['metadata'], name='mycollection_meta_idx'),
        ),
        migrations.AddIndex(
            model_name='mycollection',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name', 'slug'], name='my_collection_search_gin', opclasses=['gin_trgm_ops', 'gin_trgm_ops']),
        ),
    ]
